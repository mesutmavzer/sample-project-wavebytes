// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nutritions.Api.DB;

namespace Nutritions.Api.Migrations
{
    [DbContext(typeof(NutritionsContext))]
    partial class NutritionsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Nutritions.Api.DataModels.Maaltijd", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("PersoonlijkDieetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersoonlijkDieetId");

                    b.ToTable("Maaltijden");
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.MaaltijdProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AantalInGram")
                        .HasColumnType("float");

                    b.Property<Guid>("MaaltijdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaaltijdId");

                    b.HasIndex("ProductId");

                    b.ToTable("MaaltijdProducten");
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.PersoonlijkDieet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PersoonlijkDieeten");
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Beschrijving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Calcium")
                        .HasColumnType("float");

                    b.Property<double>("Cholestrol")
                        .HasColumnType("float");

                    b.Property<double>("Eiwit")
                        .HasColumnType("float");

                    b.Property<double>("EnergieInKJoule")
                        .HasColumnType("float");

                    b.Property<double>("EnergieInKcal")
                        .HasColumnType("float");

                    b.Property<double>("EnkelvoudigVerzadigdVet")
                        .HasColumnType("float");

                    b.Property<double>("Fosfor")
                        .HasColumnType("float");

                    b.Property<double>("Gevoelswaarde")
                        .HasColumnType("float");

                    b.Property<double>("Gezondheidswaarde")
                        .HasColumnType("float");

                    b.Property<double>("Ijzer")
                        .HasColumnType("float");

                    b.Property<double>("Kalium")
                        .HasColumnType("float");

                    b.Property<double>("Koolhydraten")
                        .HasColumnType("float");

                    b.Property<double>("Koper")
                        .HasColumnType("float");

                    b.Property<double>("Magnesium")
                        .HasColumnType("float");

                    b.Property<double>("MeervoudigVerzadigdVet")
                        .HasColumnType("float");

                    b.Property<double>("Natrium")
                        .HasColumnType("float");

                    b.Property<string>("ProductNaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPortie")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProductgroepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Suikers")
                        .HasColumnType("float");

                    b.Property<double>("VerzadigdVet")
                        .HasColumnType("float");

                    b.Property<double>("Vet")
                        .HasColumnType("float");

                    b.Property<double>("VitamineA")
                        .HasColumnType("float");

                    b.Property<double>("VitamineB1")
                        .HasColumnType("float");

                    b.Property<double>("VitamineB11")
                        .HasColumnType("float");

                    b.Property<double>("VitamineB12")
                        .HasColumnType("float");

                    b.Property<double>("VitamineB2")
                        .HasColumnType("float");

                    b.Property<double>("VitamineB6")
                        .HasColumnType("float");

                    b.Property<double>("VitamineC")
                        .HasColumnType("float");

                    b.Property<double>("VitamineD")
                        .HasColumnType("float");

                    b.Property<double>("Voedingsvezels")
                        .HasColumnType("float");

                    b.Property<double>("Water")
                        .HasColumnType("float");

                    b.Property<double>("Zink")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductgroepId");

                    b.ToTable("Producten");
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.Productgroep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductgroepNaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Productgroepen");
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PersoonlijkDieetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PersoonlijkDieetId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.Maaltijd", b =>
                {
                    b.HasOne("Nutritions.Api.DataModels.PersoonlijkDieet", "PersoonlijkDieet")
                        .WithMany("Maaltijden")
                        .HasForeignKey("PersoonlijkDieetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.MaaltijdProduct", b =>
                {
                    b.HasOne("Nutritions.Api.DataModels.Maaltijd", "Maaltijd")
                        .WithMany("Maaltijdproducten")
                        .HasForeignKey("MaaltijdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nutritions.Api.DataModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.PersoonlijkDieet", b =>
                {
                    b.HasOne("Nutritions.Api.DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.Product", b =>
                {
                    b.HasOne("Nutritions.Api.DataModels.Productgroep", "Productgroep")
                        .WithMany("Producten")
                        .HasForeignKey("ProductgroepId");
                });

            modelBuilder.Entity("Nutritions.Api.DataModels.User", b =>
                {
                    b.HasOne("Nutritions.Api.DataModels.PersoonlijkDieet", "PersoonlijkDieet")
                        .WithMany()
                        .HasForeignKey("PersoonlijkDieetId");
                });
#pragma warning restore 612, 618
        }
    }
}
